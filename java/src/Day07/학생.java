package Day07;

public class 학생 {
	
	// 멤버 
	// 1. 필드 [ 메모리 : 변수 , 객체등 ] 
	String 이름;
	int 나이;
	
	// 2. 생성자 [ 객체 선언시 필드의 초기값 ] 
		// 1. 클래스 이름과 동일하게 생성자 이름 정의
		// 2. 생성자 인수는 현 클래스의 필드명과 동일하게 [ 일반적 ] 
			// this.멤버	: 현재 클래스에서의 멤버 접근 
	public 학생() {
	}
	public 학생( String 이름 , int 나이 ) {
		this.이름 = 이름;
		this.나이 = 나이;
	}
	// 3. 메소드=함수 [ 미리 작성된 코드 : 재활용 ]
		// 1. 여러번 사용되는 코드를 묶음처리 => 반복사용 
		// 2. 입력에 따른 결과를 출력  
		// 3. 메소드 안에서 실행된 메모리는 메소드 종료후 초기화 
		// 4. 메소드형태 
			// 1. 접근제한자 : 해당 메소드를 호출할수있는 범위 제한 
				// pubilc : 프로젝트내 모든 곳에서 호출 가능 [ 다른클래스 접근 가능 ] 
				// private : 현재 클래스에서만 호출 가능 [ 다른클래스 접근 불가 ]
			// 2. 반환타입[return] : 메소드 종료시 되돌려주는 데이터 [ 남기는 데이터 ] 
			// 3. 메소드명 : 임의의 이름 
			// 4. 메소드명( 인수1 , 인수2 , 인수3 ~~~ ) : 메소드 안으로 들어오는 데이터
					// 보내는 인수의 이름과 받는 인수의 이름 다르게 선언 가능 
					// 단 : 보내는 인수와 받는 인수의 자료형/클래스 무조건 동일하게 
	
	public String 이름출력() {
	//public : 동일 프로젝트내 호출 가능한 메소드 
		// String : return되는 데이터의 타입 
			// 이름출력() : 메소드명() : 인수가 없는 메소드 
		return 이름;
	}
	public int 나이출력() { // 인수 x 반환 o 
		return 나이;
	}
	public void 회원정보() { // 인수x 반환 x
		// void : return 의 데이터가 없다 
		System.out.println( this.이름 );
		System.out.println( this.나이 );
	}
	public int 학생점수( int 점수 ) { // 인수o 반환o 
		점수 += 10;
		return 점수;
	}
	public void 나이업데이트( int 나이  ) { // 인수o 반환x
		this.나이 = 나이; 
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
